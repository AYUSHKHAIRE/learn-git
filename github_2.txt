# part 2

#add a remote server
git remote add origin https://github.com/AYUSHKHAIRE/learn-git.git
remote name is origin 

# to see commands for fetch and push
git remote -v
# now my git know it is my server 

# now push it
git push -u  [server name ] [ branch ]  

use SSH for authentication 

ssh-keygen -t ed25519 -C "email@example.com"

view keys
cd /home/[username]/.ssh/
cat id_ed25519.pub
ssh-ed25519 [public key] [email]

<<<<<<< HEAD
see a branch
git branch 

make a new branch
git branch name 

go to a branch 
git checkout branchname 

publish branch on repo
git push --set-upstream [server] [branch]
=======
# branch
two developers or two features can be developed independemtly
in the branches , to moniter reverts and avoid some conflicts .
i can merge some others commit for my code in a single commit 
or it also make it easy to revert to someone elses code .

now enter in a branch 
git checkout new_branch
* represents current branch 

make a new branch on the remote server 
git push --set-upstream [remote] [branch]

pushing in a new branch 

now go again to master for merging 

merge the changes 
git merge [server]/[branch]

and push 

make a new branch 
git checkout -b "branchtwo"

branch made , a feature function new one second functionadded
git push --set-upstream origin branchtwo 
>>>>>>> origin/branchtwo


rebase 
in merge , if we start a branch and then merge after some commits ,
if we merge , we will loose the commit history after merging . 

to avoid this ,
there is a method rebasing
in which we do like we just add the head of new branch to the end of original branch .

but merge is better as for short history 

add and commit in a branch 
git commit -a -m "commit1"